<?php
// name: Make/refresh configuration and hint files
// description: Generate configs file by env and Search all config constructs as generate config file

/*
c\config()->module1='1';
//echo c\config()->$module1;

// Модуль 2 модуля 1
c\config()->module1()->module2='12';
c\config()->module1()->module2='12';
c\config()->module1()->module1=11;
echo c\config()->module1;
echo c\config()->module1()->module2;

*/

// generate env file
$str = '';
if (file_exists('.env')) {
    $str = file_get_contents('.env');
}
if (file_exists('.env.local')) {
    $str .= '
' . file_get_contents('.env.local');
}

if ($str) {
    $re = '/^\s*(.*)=(.*)\s*$/Um';

    preg_match_all($re, $str, $matches, PREG_SET_ORDER, 0);
    $configs = $variableConfigs = array();
    foreach ($matches as $match) {
        if (substr($match[1], 0, 1) === '#') continue;

        $variableConfigs['${' . $match[1] . '}'] = $configs[$match[1]] = quotesVariables($match[2], $variableConfigs);
    }
    foreach ($configs as &$value) {
        $value = typeMatch($value);
    }

    $content = '<?php
// autogenerated by core-helper/make-models
';
    foreach ($configs as $key => $config) {
        $content .= 'c\config()->' . $key . '=' . var_export($config, true) . ';
';
    };
    file_put_contents('config/env_autogenerate.php', $content);
    echo "config/env_autogenerate.php file saved";
}

function quotesVariables($value, $variables)
{
    $value = trim($value);
    if ($value === '') return $value;
    $first = mb_substr($value, 0, 1);
    if ($first == '"' or $first == "'") {
        if (!mb_substr($value, -1) === $first) throw new Exception('Failed parse env file');
        $value = mb_substr($value, 1, -1);
        $value = strtr($value, array('\\\\' => '\\', '\\' . $first => $first));
    }
    $value = strtr($value, $variables);
    return $value;
}

function typeMatch($value)
{
    if ($value === 'true') return true;
    if ($value === 'false') return false;
    if ($value === 'null') return null;
    return $value;
}

foreach (c\filedata::filelist('app') + c\filedata::filelist('config') as $filename => $t) {
    $token = token_get_all(file_get_contents($filename));
    foreach ($token as $key => $value) {
        //if (is_string($value))continue;
        if ($value[1] == 'config' && $value[0] == T_STRING && $token[$key - 1][1] == '\\' && $token[$key - 2][1] == 'c') {
            if ($token[$key + 1] == '(' && $token[$key + 2] == ')' && $token[$key + 3][1] == '->' && $token[$key + 4][0] == T_STRING) {
                $comment = $token[$key - 3][0] == T_METHOD_C ? trim(substr($token[$key - 3][1], 2)) : true;
                $config1 = $token[$key + 4][1];
                if ($token[$key + 5] == '(' && $token[$key + 6] == ')' && $token[$key + 7][1] == '->' && $token[$key + 8][0] == T_STRING) {
                    $configs1[$config1] = !isset($configs1[$config1]) ? $configs1[$config1] : $comment;
                    $config2 = $token[$key + 8][1];
                    $configs2[$config1][$config2] = (isset($configs2[$config1][$config2]) && is_string($configs2[$config1][$config2])) ? $configs2[$config1][$config2] : $comment;
                } else {
                    $configs1[$config1] = (isset($configs1[$config1]) && is_string($configs1[$config1])) ? $configs1[$config1] : $comment;
                }
            }
        }
    }
}
print_r($configs1);
print_r($configs2);

// make hint config files
$file = c\core::$data['include_dir'] . '/hint/config.php';
$begin = true;
$end = true;
$source_content = '';
$custom = '

';
if (file_exists($file)) {
    $source_content = file_get_contents($file);
    $begin = strpos($source_content, '/* BEGIN CUSTOM CODE */');
    $end = strpos($source_content, '/* END CUSTOM CODE */');

    $custom = (substr(
        $source_content,
        $begin + strlen('/* BEGIN CUSTOM CODE */' . PHP_EOL),
        $end - $begin - 2 - strlen('/* END CUSTOM CODE */' . PHP_EOL)
    ));
}

if ($begin && $end) {
    // generate hint model
    $content = '<?php
namespace c;

class config{

/* BEGIN CUSTOM CODE */' . PHP_EOL . $custom . '/* END CUSTOM CODE */' . PHP_EOL;
    foreach ($configs1 as $config_name => $config_comment) {
        if (is_string($config_comment)) {
            $content .= '	/**
	 * ' . $config_comment . '
	*/

';
        }
        $content .= '	var $' . $config_name . ';

';
    }
    foreach ($configs2 as $config1_name => $config1_value) {
        $content .= '	function ' . $config1_name . '(){
		return new config_' . $config1_name . '();
	}

';
    }
    $content .= '}';

    // make subclasses
    foreach ($configs2 as $config1_name => $config1_value) {
        $content .= '

class config_' . $config1_name . '{
';
        foreach ($config1_value as $config2_name => $config2_comment) {
            if (is_string($config2_comment)) {
                $content .= '	/**
	 * ' . $config2_comment . '
	 */
';
            }
            $content .= '	var $' . $config2_name . ';

';
        }
        $content .= '
}';
    }

    if ($content != $source_content) file_put_contents($file, $content);
    echo "Config hint created";
}
